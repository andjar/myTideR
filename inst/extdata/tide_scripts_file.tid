caption: Import files
tags: DoNotRun
tide_order: 50
tide_recipe: tide-files
title: $:/tide/scripts/file
type: text/vnd.tiddlywiki

```r
# Function to determine file type
get_file_type <- function(extension) {
  music_extensions <- c("mp3", "wav", "flac", "aac")
  video_extensions <- c("mp4", "avi", "mkv", "mov")
  image_extensions <- c("jpg", "jpeg", "png", "gif", "bmp")
  document_extensions <- c("pdf", "doc", "docx", "txt", "xls", "xlsx", "ppt", "pptx")

  if (extension %in% music_extensions) {
    return("music")
  } else if (extension %in% video_extensions) {
    return("video")
  } else if (extension %in% image_extensions) {
    return("image")
  } else if (extension %in% document_extensions) {
    return("document")
  } else {
    return("other")
  }
}

# Function to get file metadata
get_file_metadata <- function(file_path) {
  file_info <- file.info(file_path)
  creation_date <- format(as.POSIXct(file_info$ctime, tz = "UTC"), "%Y%m%d%H%M%S000")
  modification_date <- format(as.POSIXct(file_info$mtime, tz = "UTC"), "%Y%m%d%H%M%S000")

  file_size <- file_info$size
  mime_type <- mime::guess_type(file_path)

  # Initialize dimensions and duration
  dimensions <- NA
  duration <- NA

  # Get dimensions for images and videos
  if (tools::file_ext(file_path) %in% c("jpg", "jpeg", "png", "gif", "bmp", "mp4", "avi", "mkv", "mov")) {
    media_info <- av::av_media_info(file_path)
    if (!is.null(media_info$streams[[1]]$width)) {
      dimensions <- paste(media_info$streams[[1]]$width, "x", media_info$streams[[1]]$height, sep = "x")
    }
    if (!is.null(media_info$duration)) {
      duration <- as.numeric(media_info$duration)
    }
  }

  # Get duration for audio files
  if (tools::file_ext(file_path) == "wav") {
    audio_info <- tuneR::readWave(file_path)
    duration <- audio_info@samp.rate * length(audio_info@left) / audio_info@bit / audio_info@stereo
  }
  if (tools::file_ext(file_path) == "mp3") {
    audio_info <- tuneR::readMP3(file_path)
    duration <- audio_info@samp.rate * length(audio_info@left) / audio_info@bit / audio_info@stereo
  }

  list(
    creation_date = creation_date,
    modification_date = modification_date,
    file_size = file_size,
    mime_type = mime_type,
    dimensions = dimensions,
    duration = duration
  )
}

# Function to create or update a tiddler for a file
create_or_update_tiddler <- function(file_path, existing_hashes, tiddlers, tides, recipe) {
  file_name <- basename(file_path)
  file_extension <- tools::file_ext(file_path)
  sfile_hash <- digest::digest(file_path, algo = "sha256")
  file_type <- get_file_type(file_extension)
  file_metadata <- get_file_metadata(file_path)
  today_date <- Sys.Date()

  # Convert creation_date string to a date object
  creation_date <- as.POSIXct(min(file_metadata$creation_date, file_metadata$modification_date), format = "%Y%m%d%H%M%S000", tz = "UTC")
  creation_date_folder <- format(creation_date, "%Y-%m-%d")

  if (sfile_hash %in% existing_hashes) {
    # Update existing tiddler with the new date
    tiddler <- get_tiddler(title = tides[file_hash == sfile_hash, title])
    if (!is.null(tiddler)) {
      tiddler$fields$file_added <- paste(tiddler$fields$file_added, format(today_date, "%Y-%m-%d"), sep = " ")
      put_tiddler(title = tiddler$title, text = tiddler$text, type = tiddler$type, fields = tiddler$fields)
    }
    # Delete the file from inbox
    file.remove(file_path)
  } else {
    # Move the file to the appropriate folder
    new_folder <- file.path(dirname(dirname(file_path)), "file-archive", creation_date_folder)
    if (!dir.exists(new_folder)) {
      dir.create(new_folder, recursive = TRUE)
    }

    # Handle duplicate file names
    new_file_path <- file.path(new_folder, file_name)
    if (file.exists(new_file_path)) {
      base_name <- file_path_sans_ext(file_name)
      extension <- tools::file_ext(file_name)
      i <- 1
      repeat {
        new_file_name <- paste0(base_name, "_", i, ".", extension)
        new_file_path <- file.path(new_folder, new_file_name)
        if (!file.exists(new_file_path)) {
          break
        }
        i <- i + 1
      }
    }

    file.rename(file_path, new_file_path)

    # Create new tiddler
    tiddler <- list(
      title = paste0("$:/tides/File/", creation_date_folder, "/", file_name),
      type = "text/vnd.tiddlywiki",
      text = "",
      fields = list(
        file_path = new_file_path,
        file_relative_path = paste0("file-archive/", creation_date_folder, "/", file_name),
        file_name = file_name,
        file_extension = file_extension,
        file_type = file_type,
        file_hash = sfile_hash,
        file_folder = dirname(new_file_path),
        file_relative_folder = paste0("file-archive/", creation_date_folder),
        file_creation_date = file_metadata$creation_date,
        file_modification_date = file_metadata$modification_date,
        file_size = file_metadata$file_size,
        file_mime_type = file_metadata$mime_type,
        file_dimensions = file_metadata$dimensions,
        file_duration = file_metadata$duration,
        file_parent_folder = creation_date_folder,
        file_added = format(today_date, "%Y-%m-%d")
      )
    )

    put_tiddler(title = tiddler$title,
                text = tiddler$text,
                type = tiddler$type,
                tags = tiddler$tags,
                fields = tiddler$fields,
                recipe = recipe)
  }
  return(tiddler)
}

# Function to map a folder and create or update tiddlers for each file
import_files <- function(tiddlers, tides) {

  inbox_path <- normalizePath(file.path(tides[title == "$:/tide/settings/path", text], "inbox"), mustWork = FALSE)
  files <- list.files(inbox_path, recursive = TRUE, full.names = TRUE)

  existing_tiddlers <- tides[grepl("$:/tides/File/", title)]
  existing_hashes <- ifelse(nrow(existing_tiddlers) > 0,
                            sapply(existing_tiddlers, function(x) x$file_hash),
                            "")

  mws <- tides[title == "$:/tide/settings/mws", text] == "yes"
  recipe <- ifelse(mws, tides[title == "$:/tide/scripts/file", tide_recipe], "default")

  for (sfile in files) {
    create_or_update_tiddler(sfile, existing_hashes, tiddlers, tides, recipe)
  }
}

import_files(tiddlers, tides)
```
