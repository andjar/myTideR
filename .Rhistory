i
tiddlers$title[i]
# Fetch existing tiddlers
tiddlers <- rbindlist(get_tiddlers(), fill = TRUE)
tiddlers[, text := ""]
for (i in seq_len(nrow(tiddlers))) {
tiddlers$text[i] <- get_tiddler(tiddlers$title[i])$text
}
# Fetch existing tides
tides <- rbindlist(get_tiddlers(filter = "[prefix[$:/tide]]", exclude = ""), fill = TRUE)
tides[, text := ""]
for (i in seq_len(nrow(tides))) {
tides$text[i] <- get_tiddler(tides$title[i])$text
}
default_hook <- function(keyword, value, tiddlers, tides, relevant_tiddler_title, content) {
# Create new tiddler with content
new_tiddler_title <- paste0("$:/tides/hook/", tolower(keyword), "/", uuid::UUIDgenerate())
put_tiddler(
title = new_tiddler_title,
text  = value,
fields = list(
hook_keyword = keyword,
hook_tiddler = relevant_tiddler_title,
hook_date = format(Sys.Date(), "%Y-%m-%d")
)
)
text_to_replace <- paste0(keyword, "::", value, "::")
text_to_insert  <-  paste0("{{", new_tiddler_title, "||", "$:/tides/hook/", tolower(keyword), "}}")
new_content <- gsub(text_to_replace, text_to_insert, content, fixed = TRUE)
put_tiddler(
title = relevant_tiddler_title,
text = new_content
)
if(!paste0("$:/tides/hook/", tolower(keyword)) %in% tides$title) {
put_tiddler(
title = paste0("$:/tides/hook/", tolower(keyword)),
text = "{{!!text}}"
)
}
return(new_content)
}
hook <- function(tiddlers, tides) {
relevant_tiddlers <- tiddlers[grepl("::", tiddlers$text, fixed = TRUE)]
for (i in seq_len(nrow(relevant_tiddlers))) {
content <- tiddlers$text[i]
relevant_tiddler_title <- tiddlers$title[i]
# Find and extract the pattern KEYWORD::...:: (where KEYWORD can be any single word)
pattern <- "(\\w+)::([^:]+(?:[^:]+)*)::"
matches <- gregexpr(pattern, content, perl = TRUE)
match_list <- regmatches(content, matches)[[1]]
if (length(match_list) > 0) {
for (match in match_list) {
hits <- strsplit(match, "::", fixed = TRUE)
keyword <- hits[[1]][[1]]
value <- hits[[1]][[2]]
if (keyword == "custom_hook") {
} else {
content <- default_hook(keyword, value, tiddlers, tides, relevant_tiddler_title, content)
}
}
}
}
}
hook(tiddlers, tides)
devtools::load_all()
clc
devtools::load_all()
init("../../test-tide")
run_tides(force_run = TRUE)
devtools::load_all()
devtools::load_all()
init("../../test-tide")
devtools::load_all()
init("../test-tide")
run_tides(force_run = TRUE)
library("rtiddlywiki")
library("data.table")
tw_options(host = "http://127.0.0.1:8080/")
# Fetch existing tiddlers
tiddlers <- rbindlist(get_tiddlers(), fill = TRUE)
tiddlers[, text := ""]
for (i in seq_len(nrow(tiddlers))) {
tiddlers$text[i] <- get_tiddler(tiddlers$title[i])$text
}
# Fetch existing tides
tides <- rbindlist(get_tiddlers(filter = "[prefix[$:/tide]]", exclude = ""), fill = TRUE)
tides[, text := ""]
for (i in seq_len(nrow(tides))) {
tides$text[i] <- get_tiddler(tides$title[i])$text
}
script_tiddlers <- tides[grepl("$:/tide/scripts", title, fixed = TRUE)]
if(!force_run) {
script_tiddlers <- tides[!grepl("DoNotRun", tags, fixed = TRUE)]
}
# Run script tiddlers
for (i in seq_len(nrow(tides))) {
script_to_parse <- script_tiddlers$text[i]
script_to_parse <- gsub('```r', '', script_to_parse)
script_to_parse <- gsub('```', '', script_to_parse)
eval(parse(text = script_to_parse), envir = list(tiddlers = tiddlers, tides = tides))
}
script_tiddlers[4, ]
script_tiddlers[4, title]
replace_patterns <- function(string, dt) {
for (i in 1:nrow(dt)) {
string <- gsub(dt$reference[i], dt$target_tiddler[i], string, fixed = TRUE)
}
return(string)
}
web_archive <- function(tiddlers, tides) {
relevant_tiddlers <- tiddlers[grepl("http", reference, fixed = TRUE)]
existing_titles <- tides[grepl("$:/tides/Web/", title), title]
relevant_urls <- rbindlist(lapply(relevant_tiddlers, function(tiddler) {
references <- stringr::str_split(tiddler$reference, " ")
data.table(
tiddler = tiddler$title,
reference = purrr::flatten(references)
)
}))
relevant_urls <- relevant_urls[grepl("http", reference), ]
relevant_urls[, target_tiddler := paste0("$:/tides/Web/", reference)]
relevant_urls[, target_tiddler := gsub("http://", "", target_tiddler, fixed = TRUE)]
relevant_urls[, target_tiddler := gsub("https://", "", target_tiddler, fixed = TRUE)]
relevant_urls <- relevant_urls[!target_tiddler %in% existing_titles, ]
full_file_path <- normalizePath(file.path(tides[title == "$:/tide/settings/path", text], "web-archive"), mustWork = FALSE)
out_files <- lapply(seq_along(relevant_urls), function(i) {
out_file <- paste0(uuid::UUIDgenerate(), ".html")
get_url <- relevant_urls$reference[i]
system(paste0("single-file --output-directory ", full_file_path, " ", get_url, " ", out_file))
out_file
})
relevant_urls$out_file <- out_files
for(i in seq_along(relevant_urls)) {
# New web page
put_tiddler(title = relevant_urls$target_tiddler,
text = "",
type = "text/vnd.tiddlywiki",
fields = list(
caption = relevant_urls$reference,
web_date = format(Sys.Date(), "%Y-%m-%d"),
web_file_name = relevant_urls$out_file,
web_file_path = normalizePath(file.path(full_file_path, relevant_urls$out_file), mustWork = FALSE)
))
}
# Replace reference url with archived tiddler
lapply(relevant_tiddlers, function(tiddler) {
put_tiddler(title = tiddler$title,
fields = list(
reference = replace_patterns(tiddler$reference, relevant_urls)
))
})
}
relevant_tiddlers <- tiddlers[grepl("http", reference, fixed = TRUE)]
existing_titles <- tides[grepl("$:/tides/Web/", title), title]
relevant_urls <- rbindlist(lapply(relevant_tiddlers, function(tiddler) {
references <- stringr::str_split(tiddler$reference, " ")
data.table(
tiddler = tiddler$title,
reference = purrr::flatten(references)
)
}))
relevant_tiddlers
tiddler <- relevant_tiddlers[[1]]
i <-
1
tiddler <- relevant_tiddlers[i, ]
references <- stringr::str_split(tiddler$reference, " ")
data.table(
tiddler = tiddler$title,
reference = purrr::flatten(references)
)
relevant_urls <- rbindlist(lapply(seq_len(nrow(relevant_tiddlers)), function(i) {
tiddler <- relevant_tiddlers[i, ]
references <- stringr::str_split(tiddler$reference, " ")
data.table(
tiddler = tiddler$title,
reference = purrr::flatten(references)
)
}))
relevant_urls <- relevant_urls[grepl("http", reference), ]
relevant_urls[, target_tiddler := paste0("$:/tides/Web/", reference)]
relevant_urls[, target_tiddler := gsub("http://", "", target_tiddler, fixed = TRUE)]
relevant_urls[, target_tiddler := gsub("https://", "", target_tiddler, fixed = TRUE)]
relevant_urls <- relevant_urls[!target_tiddler %in% existing_titles, ]
full_file_path <- normalizePath(file.path(tides[title == "$:/tide/settings/path", text], "web-archive"), mustWork = FALSE)
full_file_path
get_url
relevant_urls$reference[i]
devtools::load_all()
init("../test-tide")
run_tides()
library("rtiddlywiki")
library("data.table")
tw_options(host = "http://127.0.0.1:8080/")
# Fetch existing tiddlers
tiddlers <- rbindlist(get_tiddlers(), fill = TRUE)
tiddlers[, text := ""]
for (i in seq_len(nrow(tiddlers))) {
tiddlers$text[i] <- get_tiddler(tiddlers$title[i])$text
}
# Fetch existing tides
tides <- rbindlist(get_tiddlers(filter = "[prefix[$:/tide]]", exclude = ""), fill = TRUE)
tides[, text := ""]
for (i in seq_len(nrow(tides))) {
tides$text[i] <- get_tiddler(tides$title[i])$text
}
script_tiddlers <- tides[grepl("$:/tide/scripts", title, fixed = TRUE)]
if(!force_run) {
script_tiddlers <- tides[!grepl("DoNotRun", tags, fixed = TRUE)]
}
script_tiddlers <- tides[!grepl("DoNotRun", tags, fixed = TRUE)]
View(script_tiddlers)
devtools::load_all()
init("../test-tide")
run_tides()
library("rtiddlywiki")
library("data.table")
tw_options(host = "http://127.0.0.1:8080/")
# Fetch existing tiddlers
tiddlers <- rbindlist(get_tiddlers(), fill = TRUE)
tiddlers[, text := ""]
for (i in seq_len(nrow(tiddlers))) {
tiddlers$text[i] <- get_tiddler(tiddlers$title[i])$text
}
# Fetch existing tides
tides <- rbindlist(get_tiddlers(filter = "[prefix[$:/tide]]", exclude = ""), fill = TRUE)
tides[, text := ""]
for (i in seq_len(nrow(tides))) {
tides$text[i] <- get_tiddler(tides$title[i])$text
}
script_tiddlers <- tides[grepl("$:/tide/scripts", title, fixed = TRUE)]
script_tiddlers <- script_tiddlers[!grepl("DoNotRun", tags, fixed = TRUE)]
nrow(tides)
# Run script tiddlers
for (i in seq_len(nrow(script_tiddlers))) {
script_to_parse <- script_tiddlers$text[i]
script_to_parse <- gsub('```r', '', script_to_parse)
script_to_parse <- gsub('```', '', script_to_parse)
eval(parse(text = script_to_parse), envir = list(tiddlers = tiddlers, tides = tides))
}
run_tides <- function(force_run = FALSE) {
library("rtiddlywiki")
library("data.table")
tw_options(host = "http://127.0.0.1:8080/")
# Fetch existing tiddlers
tiddlers <- rbindlist(get_tiddlers(), fill = TRUE)
tiddlers[, text := ""]
for (i in seq_len(nrow(tiddlers))) {
tiddlers$text[i] <- get_tiddler(tiddlers$title[i])$text
}
# Fetch existing tides
tides <- rbindlist(get_tiddlers(filter = "[prefix[$:/tide]]", exclude = ""), fill = TRUE)
tides[, text := ""]
for (i in seq_len(nrow(tides))) {
tides$text[i] <- get_tiddler(tides$title[i])$text
}
script_tiddlers <- tides[grepl("$:/tide/scripts", title, fixed = TRUE)]
if(!force_run) {
script_tiddlers <- script_tiddlers[!grepl("DoNotRun", tags, fixed = TRUE)]
}
# Run script tiddlers
for (i in seq_len(nrow(script_tiddlers))) {
script_to_parse <- script_tiddlers$text[i]
script_to_parse <- gsub('```r', '', script_to_parse)
script_to_parse <- gsub('```', '', script_to_parse)
eval(parse(text = script_to_parse), envir = list(tiddlers = tiddlers, tides = tides))
}
}
run_tides()
replace_patterns <- function(string, dt) {
for (i in 1:nrow(dt)) {
string <- gsub(dt$reference[i], dt$target_tiddler[i], string, fixed = TRUE)
}
return(string)
}
tiddlers
# Fetch existing tiddlers
tiddlers <- rbindlist(get_tiddlers(), fill = TRUE)
tiddlers[, text := ""]
for (i in seq_len(nrow(tiddlers))) {
tiddlers$text[i] <- get_tiddler(tiddlers$title[i])$text
}
# Fetch existing tides
tides <- rbindlist(get_tiddlers(filter = "[prefix[$:/tide]]", exclude = ""), fill = TRUE)
tides[, text := ""]
for (i in seq_len(nrow(tides))) {
tides$text[i] <- get_tiddler(tides$title[i])$text
}
script_tiddlers <- tides[grepl("$:/tide/scripts", title, fixed = TRUE)]
script_tiddlers <- script_tiddlers[!grepl("DoNotRun", tags, fixed = TRUE)]
script_tiddlers
relevant_tiddlers <- tiddlers[grepl("http", reference, fixed = TRUE)]
existing_titles <- tides[grepl("$:/tides/Web/", title), title]
relevant_urls <- rbindlist(lapply(seq_len(nrow(relevant_tiddlers)), function(i) {
tiddler <- relevant_tiddlers[i, ]
references <- stringr::str_split(tiddler$reference, " ")
data.table(
tiddler = tiddler$title,
reference = purrr::flatten(references)
)
}))
relevant_urls <- relevant_urls[grepl("http", reference), ]
relevant_urls[, target_tiddler := paste0("$:/tides/Web/", reference)]
relevant_urls[, target_tiddler := gsub("http://", "", target_tiddler, fixed = TRUE)]
relevant_urls[, target_tiddler := gsub("https://", "", target_tiddler, fixed = TRUE)]
relevant_urls <- relevant_urls[!target_tiddler %in% existing_titles, ]
full_file_path <- normalizePath(file.path(tides[title == "$:/tide/settings/path", text], "web-archive"), mustWork = FALSE)
seq_along(relevant_urls)
relevant_urls
seq_len(nrow(relevant_urls))
devtools::load_all()
init("../test-tide")
run_tides()
run_tides()
run_tides()
run_tides()
run_tides()
run_tides()
run_tides()
run_tides()
run_tides()
# Fetch existing tiddlers
tiddlers <- rbindlist(get_tiddlers(), fill = TRUE)
tiddlers[, text := ""]
for (i in seq_len(nrow(tiddlers))) {
tiddlers$text[i] <- get_tiddler(tiddlers$title[i])$text
}
# Fetch existing tides
tides <- rbindlist(get_tiddlers(filter = "[prefix[$:/tide]]", exclude = ""), fill = TRUE)
tides[, text := ""]
for (i in seq_len(nrow(tides))) {
tides$text[i] <- get_tiddler(tides$title[i])$text
}
script_tiddlers <- tides[grepl("$:/tide/scripts", title, fixed = TRUE)]
script_tiddlers <- script_tiddlers[!grepl("DoNotRun", tags, fixed = TRUE)]
View(script_tiddlers)
relevant_tiddlers <- tiddlers[grepl("::", tiddlers$text, fixed = TRUE)]
seq_len(nrow(relevant_tiddlers))
i <- 1
content <- tiddlers$text[i]
relevant_tiddler_title <- tiddlers$title[i]
# Find and extract the pattern KEYWORD::...:: (where KEYWORD can be any single word)
pattern <- "(\\w+)::([^:]+(?:[^:]+)*)::"
matches <- gregexpr(pattern, content, perl = TRUE)
match_list <- regmatches(content, matches)[[1]]
match_list
i
tiddlers
content <- relevant_tiddlers$text[i]
relevant_tiddler_title <- relevant_tiddlers$title[i]
# Find and extract the pattern KEYWORD::...:: (where KEYWORD can be any single word)
pattern <- "(\\w+)::([^:]+(?:[^:]+)*)::"
matches <- gregexpr(pattern, content, perl = TRUE)
match_list <- regmatches(content, matches)[[1]]
run_tides()
devtools::load_all()
init("../test-tide")
run_tides()
library("data.table")
run_tides()
run_tides()
devtools::load_all()
run_tides()
library("rtiddlywiki")
library("data.table")
tw_options(host = "http://127.0.0.1:8080/")
# Fetch existing tiddlers
tiddlers <- rbindlist(get_tiddlers(), fill = TRUE)
tiddlers[, text := ""]
for (i in seq_len(nrow(tiddlers))) {
tiddlers$text[i] <- get_tiddler(tiddlers$title[i])$text
}
# Fetch existing tides
tides <- rbindlist(get_tiddlers(filter = "[prefix[$:/tide]]", exclude = ""), fill = TRUE)
tides[, text := ""]
for (i in seq_len(nrow(tides))) {
tides$text[i] <- get_tiddler(tides$title[i])$text
}
script_tiddlers <- tides[grepl("$:/tide/scripts", title, fixed = TRUE)]
script_tiddlers <- script_tiddlers[!grepl("DoNotRun", tags, fixed = TRUE)]
i <- 1
script_to_parse <- script_tiddlers$text[i]
script_to_parse <- gsub('```r', '', script_to_parse)
script_to_parse <- gsub('```', '', script_to_parse)
eval(parse(text = script_to_parse), envir = list(tiddlers = tiddlers, tides = tides))
run_tides()
run_tides <- function(force_run = FALSE) {
library("rtiddlywiki")
library("data.table")
tw_options(host = "http://127.0.0.1:8080/")
# Fetch existing tiddlers
tiddlers <- rbindlist(get_tiddlers(), fill = TRUE)
tiddlers[, text := ""]
for (i in seq_len(nrow(tiddlers))) {
tiddlers$text[i] <- get_tiddler(tiddlers$title[i])$text
}
# Fetch existing tides
tides <- rbindlist(get_tiddlers(filter = "[prefix[$:/tide]]", exclude = ""), fill = TRUE)
tides[, text := ""]
for (i in seq_len(nrow(tides))) {
tides$text[i] <- get_tiddler(tides$title[i])$text
}
script_tiddlers <- tides[grepl("$:/tide/scripts", title, fixed = TRUE)]
if(!force_run) {
script_tiddlers <- script_tiddlers[!grepl("DoNotRun", tags, fixed = TRUE)]
}
# Run script tiddlers
for (i in seq_len(nrow(script_tiddlers))) {
script_to_parse <- script_tiddlers$text[i]
script_to_parse <- gsub('```r', '', script_to_parse)
script_to_parse <- gsub('```', '', script_to_parse)
eval(parse(text = script_to_parse), envir = list(tiddlers = tiddlers, tides = tides))
}
}
run_tides()
run_tides()
init("../test-tide")
run_tides()
run_tides()
getwd()
init("../test-tide")
run_tides()
run_tides()
run_tides()
run_tides()
devtools::load_all()
run_tides()
run_tides <- function(force_run = FALSE) {
library("rtiddlywiki")
library("data.table")
tw_options(host = "http://127.0.0.1:8080/")
# Fetch existing tiddlers
tiddlers <- rbindlist(get_tiddlers(), fill = TRUE)
tiddlers[, text := ""]
for (i in seq_len(nrow(tiddlers))) {
tiddlers$text[i] <- get_tiddler(tiddlers$title[i])$text
}
# Fetch existing tides
tides <- rbindlist(get_tiddlers(filter = "[prefix[$:/tide]]", exclude = ""), fill = TRUE)
tides[, text := ""]
for (i in seq_len(nrow(tides))) {
tides$text[i] <- get_tiddler(tides$title[i])$text
}
script_tiddlers <- tides[grepl("$:/tide/scripts", title, fixed = TRUE)]
script_tiddlers <- script_tiddlers[order(tide_order), ]
if(!force_run) {
script_tiddlers <- script_tiddlers[!grepl("DoNotRun", tags, fixed = TRUE)]
}
# Run script tiddlers
for (i in seq_len(nrow(script_tiddlers))) {
script_to_parse <- script_tiddlers$text[i]
script_to_parse <- gsub('```r', '', script_to_parse)
script_to_parse <- gsub('```', '', script_to_parse)
eval(parse(text = script_to_parse), envir = list(tiddlers = tiddlers, tides = tides))
}
}
run_tides()
devtools::build()
devtools::build()
devtools::document()
devtools::build()
devtools::build()
devtools::build()
devtools::document()
devtools::build()
.Last.error
devtools::build()
rtiddlywiki::tw_options(host = "http://127.0.0.1:8080/")
# Fetch existing tiddlers
tiddlers <- rbindlist(get_tiddlers(), fill = TRUE)
if (nrow(tiddlers) > 0) {
tiddlers[, text := ""]
for (i in seq_len(nrow(tiddlers))) {
tiddlers$text[i] <- get_tiddler(tiddlers$title[i])$text
}
}
# Fetch existing tides
tides <- rbindlist(get_tiddlers(filter = "[prefix[$:/tide]]", exclude = ""), fill = TRUE)
if (nrow(tides) > 0) {
tides[, text := ""]
for (i in seq_len(nrow(tides))) {
tides$text[i] <- get_tiddler(tides$title[i])$text
}
script_tiddlers <- tides[grepl("$:/tide/scripts", title, fixed = TRUE)]
script_tiddlers <- script_tiddlers[order(tide_order), ]
if(!force_run) {
script_tiddlers <- script_tiddlers[!grepl("DoNotRun", tags, fixed = TRUE)]
}
# Run script tiddlers
for (i in seq_len(nrow(script_tiddlers))) {
script_to_parse <- script_tiddlers$text[i]
script_to_parse <- gsub('```r', '', script_to_parse)
script_to_parse <- gsub('```', '', script_to_parse)
eval(parse(text = script_to_parse), envir = list(tiddlers = tiddlers, tides = tides))
}
}
force_run <- FALSE
if(!force_run) {
script_tiddlers <- script_tiddlers[!grepl("DoNotRun", tags, fixed = TRUE)]
}
# Run script tiddlers
for (i in seq_len(nrow(script_tiddlers))) {
script_to_parse <- script_tiddlers$text[i]
script_to_parse <- gsub('```r', '', script_to_parse)
script_to_parse <- gsub('```', '', script_to_parse)
eval(parse(text = script_to_parse), envir = list(tiddlers = tiddlers, tides = tides))
}
seq_len(nrow(script_tiddlers))
devtools::load_all()
library(myTideR)
init("../../my_tide") # path to your tide folder
run_tides()
